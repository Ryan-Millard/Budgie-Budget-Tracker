name: Build & Release APK on Tag

# Trigger on any tag push, plus manual dispatch
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

# Give this workflow permission to write repo contents (needed for creating releases)
permissions:
  contents: write

jobs:
  build-and-release:
    name: Build & Release APK
    runs-on: ubuntu-latest

    # Extra guard: only run this job for tag refs
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}

    steps:
      # 1. Check out the repo (with full history so tags are available)
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Make the Gradle wrapper executable
      - name: Ensure Gradle wrapper is executable
        run: chmod +x gradlew

      # 3. Set up Java (Temurin 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      # 4. Assemble the release APK
      - name: Assemble Release APK
        run: ./gradlew assembleRelease --no-daemon

      # 5. Locate the generated APK
      - name: Locate APK path
        id: find_apk
        run: |
          APK=$(find . -type f -path "*/build/outputs/apk/release/*release.apk" | head -n 1)
          if [ -z "$APK" ]; then
            echo "::error::No release APK found!"
            exit 1
          fi
          echo "Found APK at $APK"
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"

      # 6. Create GitHub Release and upload the APK
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref_type == 'tag' }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: ${{ steps.find_apk.outputs.apk_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
